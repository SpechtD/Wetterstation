RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  1

QCW(0x00002F32)

DOS RC51 COMPILER V03.08.10.309, COMPILATION OF MODULE LCD       
OBJECT MODULE PLACED IN M:\Code\lcd.obj
COMPILER INVOKED BY: QUIET GENERATEDEPFILE OJ(M:\Code\lcd.obj) PIN(C:\Raisonance
            -\Ride\Inc;C:\Raisonance\Ride\Inc\51) PIN(C:\Raisonance\Ride\\inc\51
            -\SiLabs) NOAM CD PR(M:\Code\lcd.lst) FP(NOFLOAT) IP NOIS UNSIGNEDCH
            -AR ET(CHAR) PR PL(60) PW(80) OE(1) OT(7,SPEED) RB(0) MAXERR(25) MAX
            -WAR(25) SM MOD517(NODP8,NOAU) 

stmt level    source
   1          /*
   2          ;Name:      Captain
   3          ;Datum:     25.04.2019
   4          ;Aufgabe:   Test C LCD Display (2 x16 Zeichen) am Port 3 angeschlo
            -ssen
   5          ;Controller:C8051F340
   6          ;Da der µC C8051F340 viel schneller getaktet ist, als das LCD-Disp
            -lay es verarbeiten kann,
   7          ;mussten die Warteschleifen entsprechend angepasst werden!
   8          */
   9          
  10          /* lcd.c *********************************************************
            -*************************
  11           *        Funktionen zur Ansteuerung des LCD-Displays
  12           *****************************************************************
            -*************************/
  13           
  14          #include <C_8051F340.h>						//	Registeradressen											
  15          #include <intrins.h>						// für _crol_ -Funktion									
  16          #include <stdio.h>							//	für sprintf													
  17          
  18          unsigned char LCD_PORT;	
  19          #define LCD_PORT P3 						//	LCD-Display an P3 im Port-4-Bit-Modus
            -		
  20          
  21          void initlcd (void);													// Initialisierung
  22          void textlcd (unsigned char *text, unsigned char zeile);	// Textau
            -sgabe in Zeile 1 bis 4
  23          //void definierelcdsymbol (unsigned char pixelprozeile [8],unsigne
            -d char adr);
  24          														// Definition von max 7 eigenen Zeichen Adr 1 bis 7
  25          void LCDbefehl (unsigned char befehl);		// Ausgabe von Befehlen la
            -ut Datenblatt
  26          void charlcd (unsigned char zeichen);		// Ausgabe eines Zeichens a
            -n die aktuelle Cursorposition
  27          void cursorpos (unsigned char position);	// Setzen der Cursorposit
            -ion
  28          
  29          
  30          void main(void){
  31   1          initlcd();
  32   1          charlcd('a');
  33   1      }
  34          
  35          /*****************************************************************
            -*************************
  36           *  Zeitverzögerung:  wartet ca.  anzahl mal 100µs                
            -                                     
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  2

  37           *****************************************************************
            -*************************/
  38          void warte100u (int anzahl)	
  39          	{
  40   1      	int z1,z2;
  41   1      	for (z2 = anzahl;	z2 != 0;	--z2)
  42   1      		{
  43   2      		for (z1 = 3; 	z1!= 0; 	--z1);
  44   2      		};
  45   1      	}
  46          
  47          /*****************************************************************
            -************************
  48           * 	Gibt das Byte  befehl  als Befehl an LCD-Display im 4Bit-Modus
            -                              
  49           *      Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung v
            -erwenden        
  50           *****************************************************************
            -************************/
  51          void LCDbefehl (unsigned char befehl)		
  52          	{	
  53   1      	unsigned char a1;
  54   1      	a1 = befehl;
  55   1      	a1 = _crol_ (a1,4); 			// in intrins.h, char um 4 Bits rolieren -
            -> High und Lownibbel vertauschen 													
  56   1      	a1 = (a1 & 0x0F) | 0x10;	//	4 Bits maskieren, Übergabetakt = 1, H
            -igh-Nibbel senden	
  57   1      	LCD_PORT = a1;
  58   1      	LCD_PORT = a1 & 0x00;		// Takt = 0 																
  59   1      	a1 = befehl;					// Low-Nibbel																
  60   1      	a1 = (a1 & 0x0F) | 0x10;	//	4 Bits maskieren, Übergabetakt = 1			
            -					
  61   1      	LCD_PORT = a1;
  62   1      	LCD_PORT = a1 & 0x00;		// Takt = 0 																
  63   1      	
  64   1      //***** Busy-Abfrage *********************************************
            -**************************	
  65   1      	warte100u(200);
  66   1          /*
  67   1          do {
  68   1      		LCD_PORT = 0x5F;			//  Busy lesen, Takt=1, RS = 0										
  69   1      		a1 = LCD_PORT	;			//	und holen																
  70   1      		LCD_PORT = 0x4F;			//	Takt=0																	
  71   1      		//a = a;
  72   1      		LCD_PORT = 0x5F;			//	Low-Byte holen (ohne Bedeutung)									
  73   1      		LCD_PORT = 0x4F;		
  74   1      		}
  75   1      	while ( (a1 & 0x08) != 0 ); //	warten solange Busy high
  76   1          */
  77   1       //***** Ende Busy-Abfrage ***************************************
            -***************************
  78   1      	
  79   1      //	wenn Busy nicht geht, Zeitverzögerung 1ms verwenden 	**********
            -************************
  80   1      //	warte100u (10);
  81   1      
  82   1      	}
  83          
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  4

  84          /*****************************************************************
            -******************
  85           * Pixelweise Definition eigener LCD-Zeichen, Ablegen von max 7 Ze
            -ichen im CG-RAM des LCD
  86           *****************************************************************
            -******************/
  87          /*
  88          void definierelcdsymbol (unsigned char pixelprozeile [8],unsigned 
            -char adr)
  89          	{unsigned char z;
  90          	if ((adr>0) & (adr<8)) 									// Adr0 geht nicht !????, max Adr
            - 7
  91          	LCDbefehl (((adr*8) & 0x7F) | 0x40);	
  92          	// Adresse der ersten Pixelzeile = 8 x Adresse des fertigen Zeich
            -ens im DD Ram
  93          	// Zugriff auf Adresse im CG-RAM (Character Generator) mit  Bit7 
            -= 0, Bit6 = 1
  94          	for (z=0;z<8;z++)	charlcd (pixelprozeile[z]);	//	8 Pixelzeilen in
            -s CR-Ram
  95          	cursorpos (0);												// wieder auf DD-Ram-Zugriff umschalten
            -		
  96          	}
  97          */	
  98          /*****************************************************************
            -*************************
  99           * Initialisierung des LCD- Displays für den 4-Bit-Modus          
            -                                     
 100           *****************************************************************
            -*************************/
 101          void initlcd (void)				
 102          	{ 
 103   1      	LCD_PORT = 0x13;			//	aufwecken! 	Takt=1	00010011											
 104   1      	LCD_PORT = 0x03;			//					Takt=0	00000011											
 105   1      	warte100u (200);			//	warten		       													
 106   1      	LCD_PORT = 0x13;			//	aufwecken! 	Takt=1														
 107   1      	LCD_PORT = 0x03;			//					Takt=0														
 108   1      	warte100u (200);				//	warten		      												
 109   1      	LCD_PORT = 0x13;			//	aufwecken! 	Takt=1														
 110   1      	LCD_PORT = 0x03;			//				Takt=0															
 111   1      	warte100u (200);				//	warten		       												
 112   1      	LCD_PORT = 0x12;			//	8->4  BITS UMSCHALTEN,	Takt=1										
 113   1      	LCD_PORT = 0x02;   		//						Takt=0													
 114   1      	warte100u (200);				//	warten		       												
 115   1      	LCDbefehl (0x28);			//	Function set 4 bits  													
 116   1      	LCDbefehl (0x0C);			//	Display AN, Cursor AUS													
 117   1      	LCDbefehl (0x06);			//	Not Shifted Display, Increment				
 118   1      	}
 119          
 120          /*****************************************************************
            -*************************
 121           * Display löschen	                                               
            -                                                       
 122           *****************************************************************
            -*************************/
 123          void loeschenlcd (void)		
 124          	{	LCDbefehl (0x01);	}
 125          
 126          /*****************************************************************
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  6

            -************************
 127           * 	Ausgabe eines Zeichens an das LCD-Display                     
            -                                     
 128           *      Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung v
            -erwenden         
 129           *****************************************************************
            -*************************/
 130          void charlcd (unsigned char zeichen)	
 131          	{
 132   1      	unsigned char a1;
 133   1      	a1 = zeichen ;	
 134   1      //	al >> 4;
 135   1      	a1 = _crol_ (a1,4); 	// in intrins.h, char um 4 Bits rolieren -> 
            -High und Lownibbel 
 136   1      								//	vertauschen im Debugger getestet, geht 																
            -			
 137   1      	a1 = (a1 & 0x0F) | 0x90;	//	4 Bits maskieren, Übergabetakt = 1, H
            -igh-Nibbel senden	
 138   1      	LCD_PORT = a1;
 139   1      	LCD_PORT = a1 & 0x80;		// Takt = 0 																
 140   1      	a1 = zeichen;					// Low-Nibbel																
 141   1      	a1 = (a1 & 0x0F) | 0x90;	//	4 Bits maskieren, Übergabetakt = 1			
            -					
 142   1      	LCD_PORT = a1;
 143   1      	LCD_PORT = a1 & 0x80;		// Takt = 0 																
 144   1      	
 145   1      //**** Busy-Abfrage **********************************************
            -*************************	
 146   1          warte100u(200);
 147   1          /*    
 148   1      	do {
 149   1      		LCD_PORT = 0x5F;			//  Busy lesen, Takt=1, RS = 0										
 150   1      		a1 = LCD_PORT	;			//	und holen																
 151   1      		LCD_PORT = 0x4F;			//	Takt=0																	
 152   1      		//a = a;
 153   1      		LCD_PORT = 0x5F;			//	Low-Byte holen (ohne Bedeutung)									
 154   1      		LCD_PORT = 0x4F;		
 155   1      		}
 156   1      	while ( (a1 & 0x08) != 0 ); //	warten solange Busy high
 157   1          */
 158   1       //**** Ende Busy-Abfrage ****************************************
            -**************************	
 159   1      	
 160   1      //	wenn Busy nicht geht, Zeitverzögerung 1ms verwenden ***********
            -*************************
 161   1      //	warte100u (10);
 162   1      	} 
 163          
 164          /*****************************************************************
            -************************
 165           * LCD-Cursor auf eine position setzen: Zeile 1: Adresse 0x00 bis 
            -0x0F                     
 166           *                                      Zeile 2: Adresse 0x40 bis 
            -0x4F  
 167           *                                      Zeile 3: Adresse 0x10 bis 
            -0x1F
 168           *													 Zeile 4: Adresse 0x50 bis 0x5F                   
 169           *****************************************************************
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  7

            -*************************/
 170          void cursorpos (unsigned char position)
 171          	{ 	LCDbefehl ( position | 0x80 ); }	// Kennung für DD RAM address
            - set							
 172          
 173          /*****************************************************************
            -************************
 174           * LCD-Cursor auf die Position Home 0x00 setzen                   
            -                        
 175           *****************************************************************
            -*************************/	
 176          void cursorhome (void)
 177          	{	LCDbefehl (0x02 );	}
 178          
 179          /*****************************************************************
            -************************
 180           * Text an das LCD-Display in Zeile 1 bsi 4 ausgeben              
            -            
 181           *****************************************************************
            -*************************/
 182          void textlcd (unsigned char *text, unsigned char zeile)									
 183          	{
 184   1      	if 	(zeile == 1)	{ cursorpos (0x00);}	//	LCD-Zeile 1											
 185   1      	if    (zeile == 2) 	{ cursorpos (0x40);}	// LCD-Zeile 2			
 186   1      	if		(zeile == 3)   { cursorpos (0x10);} // LCD-Zeile 3	
 187   1      	if    (zeile == 4)   { cursorpos (0x50);} // LCD-Zeile 4   						
            -	
 188   1      	while (*text)
 189   1          {        //	Text													
 190   2      	  charlcd(*text++); 
 191   2            warte100u(200);
 192   2          }
 193   1          //	zeichenweise ausgeben 							
 194   1      	}
 195          
 196          
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE 10

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 31 
0000 120000  R      LCALL  initlcd
                                           ; SOURCE LINE # 32 
0003 7F61           MOV    R7,#061H
0005 020000  R      LJMP   _charlcd

            ; FUNCTION main (END)

            ; FUNCTION _warte100u (BEGIN)
              ; Register R6R7 is assigned to parameter anzahl
              ; R2R3 is assigned to z1
              ; R4R5 is assigned to z2
                                           ; SOURCE LINE # 41 
0000 8E04           MOV    AR4,R6
0002 8F05           MOV    AR5,R7
0004         ?FOR2:
0004 EC             MOV    A,R4
0005 4D             ORL    A,R5
0006 6016           JZ     ?NXT4
                                           ; SOURCE LINE # 43 
0008 E4             CLR    A
0009 FA             MOV    R2,A
000A 7B03           MOV    R3,#003H
000C         ?FOR3:
000C EA             MOV    A,R2
000D 4B             ORL    A,R3
000E 6007           JZ     ?NXT5
0010 EB             MOV    A,R3
0011 1B             DEC    R3
0012 70F8           JNZ    ?FOR3
0014 1A             DEC    R2
0015 80F5           SJMP   ?FOR3
0017         ?NXT5:
                                           ; SOURCE LINE # 41 
0017 ED             MOV    A,R5
0018 1D             DEC    R5
0019 70E9           JNZ    ?FOR2
001B 1C             DEC    R4
001C 80E6           SJMP   ?FOR2
001E         ?NXT4:
                                           ; SOURCE LINE # 45 
001E 22             RET    

            ; FUNCTION _warte100u (END)

            ; FUNCTION _LCDbefehl (BEGIN)
              ; Register R7 is assigned to parameter befehl
              ; R6 is assigned to a1
                                           ; SOURCE LINE # 55 
0000 75F004         MOV    B,#004H
0003 EF             MOV    A,R7
0004         ?LAB10:
0004 23             RL     A
0005 D5F0FC         DJNZ   B,?LAB10
                                           ; SOURCE LINE # 56 
0008 540F           ANL    A,#00FH
000A 4410           ORL    A,#010H
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  3

                                           ; SOURCE LINE # 57 
000C F5B0           MOV    P3,A
                                           ; SOURCE LINE # 58 
000E E4             CLR    A
000F F5B0           MOV    P3,A
              ; R6 is assigned to a1
                                           ; SOURCE LINE # 60 
0011 EF             MOV    A,R7
0012 540F           ANL    A,#00FH
0014 4410           ORL    A,#010H
                                           ; SOURCE LINE # 61 
0016 F5B0           MOV    P3,A
                                           ; SOURCE LINE # 62 
0018 E4             CLR    A
0019 F5B0           MOV    P3,A
                                           ; SOURCE LINE # 65 
001B FE             MOV    R6,A
001C 7FC8           MOV    R7,#0C8H
001E 020000  R      LJMP   _warte100u

            ; FUNCTION _LCDbefehl (END)

            ; FUNCTION initlcd (BEGIN)
                                           ; SOURCE LINE # 103 
0000 75B013         MOV    P3,#013H
                                           ; SOURCE LINE # 104 
0003 75B003         MOV    P3,#003H
                                           ; SOURCE LINE # 105 
0006 E4             CLR    A
0007 FE             MOV    R6,A
0008 7FC8           MOV    R7,#0C8H
000A 120000  R      LCALL  _warte100u
                                           ; SOURCE LINE # 106 
000D 75B013         MOV    P3,#013H
                                           ; SOURCE LINE # 107 
0010 75B003         MOV    P3,#003H
                                           ; SOURCE LINE # 108 
0013 120000  R      LCALL  _warte100u
                                           ; SOURCE LINE # 109 
0016 75B013         MOV    P3,#013H
                                           ; SOURCE LINE # 110 
0019 75B003         MOV    P3,#003H
                                           ; SOURCE LINE # 111 
001C 120000  R      LCALL  _warte100u
                                           ; SOURCE LINE # 112 
001F 75B012         MOV    P3,#012H
                                           ; SOURCE LINE # 113 
0022 75B002         MOV    P3,#002H
                                           ; SOURCE LINE # 114 
0025 120000  R      LCALL  _warte100u
                                           ; SOURCE LINE # 115 
0028 7F28           MOV    R7,#028H
002A 120000  R      LCALL  _LCDbefehl
                                           ; SOURCE LINE # 116 
002D 7F0C           MOV    R7,#00CH
002F 120000  R      LCALL  _LCDbefehl
                                           ; SOURCE LINE # 117 
0032 7F06           MOV    R7,#006H
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  5

0034 020000  R      LJMP   _LCDbefehl

            ; FUNCTION initlcd (END)

            ; FUNCTION loeschenlcd (BEGIN)
                                           ; SOURCE LINE # 124 
0000 7F01           MOV    R7,#001H
0002 020000  R      LJMP   _LCDbefehl

            ; FUNCTION loeschenlcd (END)

            ; FUNCTION _charlcd (BEGIN)
              ; Register R7 is assigned to parameter zeichen
              ; R6 is assigned to a1
                                           ; SOURCE LINE # 135 
0000 75F004         MOV    B,#004H
0003 EF             MOV    A,R7
0004         ?LAB18:
0004 23             RL     A
0005 D5F0FC         DJNZ   B,?LAB18
                                           ; SOURCE LINE # 137 
0008 540F           ANL    A,#00FH
000A 4490           ORL    A,#090H
                                           ; SOURCE LINE # 138 
000C F5B0           MOV    P3,A
                                           ; SOURCE LINE # 139 
000E 5480           ANL    A,#080H
0010 F5B0           MOV    P3,A
              ; R6 is assigned to a1
                                           ; SOURCE LINE # 141 
0012 EF             MOV    A,R7
0013 540F           ANL    A,#00FH
0015 4490           ORL    A,#090H
                                           ; SOURCE LINE # 142 
0017 F5B0           MOV    P3,A
                                           ; SOURCE LINE # 143 
0019 5480           ANL    A,#080H
001B F5B0           MOV    P3,A
                                           ; SOURCE LINE # 146 
001D 7E00           MOV    R6,#000H
001F 7FC8           MOV    R7,#0C8H
0021 020000  R      LJMP   _warte100u

            ; FUNCTION _charlcd (END)

            ; FUNCTION _cursorpos (BEGIN)
              ; Register R7 is assigned to parameter position
                                           ; SOURCE LINE # 171 
0000 EF             MOV    A,R7
0001 4480           ORL    A,#080H
0003 FF             MOV    R7,A
0004 020000  R      LJMP   _LCDbefehl

            ; FUNCTION _cursorpos (END)

            ; FUNCTION cursorhome (BEGIN)
                                           ; SOURCE LINE # 177 
0000 7F02           MOV    R7,#002H
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  8

0002 020000  R      LJMP   _LCDbefehl

            ; FUNCTION cursorhome (END)

            ; FUNCTION _textlcd (BEGIN)
                                           ; SOURCE LINE # 182 
0000 8B00    R      MOV    text,R3
0002 8A00    R      MOV    text+01H,R2
0004 8900    R      MOV    text+02H,R1
0006 8D00    R      MOV    zeile,R5
                                           ; SOURCE LINE # 184 
0008 BD0105         CJNE   R5,#001H,?NXT13
000B E4             CLR    A
000C FF             MOV    R7,A
000D 120000  R      LCALL  _cursorpos
0010         ?NXT13:
                                           ; SOURCE LINE # 185 
0010 E500    R      MOV    A,zeile
0012 B40205         CJNE   A,#002H,?NXT14
0015 7F40           MOV    R7,#040H
0017 120000  R      LCALL  _cursorpos
001A         ?NXT14:
                                           ; SOURCE LINE # 186 
001A E500    R      MOV    A,zeile
001C B40305         CJNE   A,#003H,?NXT15
001F 7F10           MOV    R7,#010H
0021 120000  R      LCALL  _cursorpos
0024         ?NXT15:
                                           ; SOURCE LINE # 187 
0024 E500    R      MOV    A,zeile
0026 B40405         CJNE   A,#004H,?WHILE1
0029 7F50           MOV    R7,#050H
002B 120000  R      LCALL  _cursorpos
002E         ?WHILE1:
                                           ; SOURCE LINE # 188 
002E AB00    R      MOV    R3,text
0030 AA00    R      MOV    R2,text+01H
0032 A900    R      MOV    R1,text+02H
0034 120000  R      LCALL  IPGN1?C
0037 601E           JZ     ?NXT17
                                           ; SOURCE LINE # 190 
0039 AB00    R      MOV    R3,text
003B AA00    R      MOV    R2,text+01H
003D A900    R      MOV    R1,text+02H
003F 0500    R      INC    text+02H
0041 E500    R      MOV    A,text+02H
0043 7002           JNZ    ?LAB26
0045 0500    R      INC    text+01H
0047         ?LAB26:
0047 120000  R      LCALL  IPGN1?C
004A FF             MOV    R7,A
004B 120000  R      LCALL  _charlcd
                                           ; SOURCE LINE # 191 
004E E4             CLR    A
004F FE             MOV    R6,A
0050 7FC8           MOV    R7,#0C8H
0052 120000  R      LCALL  _warte100u
0055 80D7           SJMP   ?WHILE1
RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE  9

0057         ?NXT17:
                                           ; SOURCE LINE # 194 
0057 22             RET    

            ; FUNCTION _textlcd (END)

RC51 COMPILER V03.08.10.309,  LCD                02/03/20  19:52:48  PAGE 11



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    268    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RC51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
